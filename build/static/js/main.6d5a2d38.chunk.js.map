{"version":3,"sources":["features/userSlice.js","SidebarChat.js","Sidebar.js","Chat.js","HactuallyChat.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","SidebarChat","className","Avatar","Sidebar","placeholder","IconButton","variant","Chat","useState","input","setInput","value","onChange","e","target","type","onClick","preventDefault","HactuallyChat","App","useSelector","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAEaA,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZC,KAAM,MAERC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GACPA,EAAMH,KAAO,S,EAKcJ,EAAUW,QAE9BC,G,EAFEN,M,EAAOI,OAEI,SAACH,GAAD,OAAWA,EAAMH,KAAKA,OAEjCJ,IAAf,Q,oCCJea,MAbf,WACI,OACI,sBAAKC,UAAU,cAAf,UACI,cAACC,EAAA,EAAD,IACA,sBAAKD,UAAU,oBAAf,UACI,8CACA,qDACA,qD,kCCyBDE,MA1Bf,WACI,OACI,sBAAKF,UAAU,UAAf,UAEI,sBAAKA,UAAU,kBAAf,UACI,cAACC,EAAA,EAAD,CAAQD,UAAU,oBAClB,sBAAKA,UAAU,iBAAf,UACI,cAAC,IAAD,IACA,uBAAOG,YAAY,cAEvB,cAACC,EAAA,EAAD,CAAYC,QAAQ,WAAWL,UAAU,uBAAzC,SACI,cAAC,IAAD,SAKR,sBAAKA,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,+BCoBDM,MA5Cf,WAAiB,IAAD,EAEcC,mBAAS,IAFvB,mBAELC,EAFK,KAEEC,EAFF,KAUZ,OACI,sBAAKT,UAAU,OAAf,UAEI,sBAAKA,UAAU,eAAf,UACI,sCAAQ,sBAAMA,UAAU,aAAhB,6BACR,gDAGJ,sBAAKA,UAAU,iBAAf,UACI,gDACA,gDACA,mDAIJ,sBAAKA,UAAU,cAAf,UACI,iCACI,uBAAOU,MAAOF,EAAOG,SAAU,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOH,QACtDP,YAAY,iBAAiBW,KAAK,SAClC,wBAAQC,QAzBJ,SAACH,GACjBA,EAAEI,iBAEFP,EAAS,KAsBG,6BAGJ,cAACL,EAAA,EAAD,UACI,cAAC,IAAD,CAAaJ,UAAU,uBCxB5BiB,MATf,WACI,OAAO,sBAAKjB,UAAU,gBAAf,UAEP,cAAC,EAAD,IAEA,cAAC,EAAD,QCaWkB,MAjBf,WAEE,IAAM5B,EAAO6B,YAAYrB,GAGzB,OACE,qBAAKE,UAAU,MAAf,SACGV,EACC,cAAC,EAAD,IAEA,sDCbO8B,cAAe,CAC5BC,QAAS,CACP/B,KAAMgC,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d5a2d38.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { Avatar } from '@material-ui/core';\nimport React from 'react';\nimport \"./SidebarChat.css\";\n\nfunction SidebarChat() {\n    return (\n        <div className=\"sidebarChat\">\n            <Avatar />\n            <div className=\"sidebarChat__info\">\n                <h3>Channel Name</h3>\n                <p>Last message sent...</p>\n                <small>Timestamp</small>\n            </div>\n        </div>\n    )\n}\n\nexport default SidebarChat;","import { Avatar, IconButton } from '@material-ui/core';\nimport React from 'react';\nimport \"./Sidebar.css\";\nimport SidebarChat from \"./SidebarChat\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RateReviewOutlinedIcon from '@material-ui/icons/RateReviewOutlined';\n\n\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n\n            <div className=\"sidebar__header\">\n                <Avatar className=\"sidebar__avatar\"/>\n                <div className=\"sidebar__input\">\n                    <SearchIcon />\n                    <input placeholder=\"search\"></input>\n                </div>\n                <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">            \n                    <RateReviewOutlinedIcon />\n                </IconButton>\n            \n            </div>\n\n            <div className=\"sidebar__chats\">\n                <SidebarChat />\n                <SidebarChat />\n                <SidebarChat />\n            </div>\n\n        </div>\n    )\n}\n\nexport default Sidebar;","import { IconButton } from '@material-ui/core';\nimport MicNoneIcon from '@material-ui/icons/MicNone';\nimport React, { useState } from 'react';\nimport \"./Chat.css\";\n\nfunction Chat() {\n\n    const [input, setInput] = useState(\"\");\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n\n        setInput(\"\");\n    };\n\n    return (\n        <div className=\"chat\">\n            \n            <div className=\"chat__header\">\n                <h4>To: <span className=\"chat__name\">Channel Name</span></h4>\n                <strong>Details</strong>\n            </div>\n\n            <div className=\"chat__messages\">\n                <h2>I am a message</h2>\n                <h2>I am a message</h2>\n                <h2>I am a message</h2>\n            </div>\n\n\n            <div className=\"chat__input\">\n                <form>\n                    <input value={input} onChange={e => setInput(e.target.value)} \n                    placeholder=\"HactualMessage\" type=\"text\" />\n                    <button onClick={sendMessage}>Send Message</button>\n                </form>\n\n                <IconButton>\n                    <MicNoneIcon className=\"chat__mic\"/>\n                </IconButton>\n                \n\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Chat;","import React from \"react\";\nimport \"./HactuallyChat.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\n\nfunction HactuallyChat() {\n    return <div className=\"hactuallychat\">\n    {/* Sidebar */}\n    <Sidebar />\n    {/* Chat */}\n    <Chat />\n    </div>\n}\n\nexport default HactuallyChat;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport HactuallyChat from \"./HactuallyChat\";\r\n\r\nfunction App() {\r\n\r\n  const user = useSelector(selectUser);\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <HactuallyChat />\r\n      ): (\r\n        <h2>You need to login</h2>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}